






function highlyDivisibleTriangleNumber(ceiling){

    let numOfFactors = 1;

    const triangleNums = [1];

    // memoization possible
    // let sets = {};

    while (numOfFactors <= ceiling){
        // find next triangle number
        triangleNums.push(triangleNums[triangleNums.length - 1] + triangleNums.length + 1)

        // find how many factors it has
        numOfFactors = findFactorsOf(triangleNums[triangleNums.length - 1]);
        
    }

    return triangleNums[triangleNums.length - 1];

    function findFactorsOf(num){
        const factors = []
        for (let i = Math.floor(Math.sqrt(num)); i > 0; i--){
            if (num % i === 0){
                let factor1 = i;
                let factor2 = num / i;
                factors.unshift(factor1)
                factors.push(factor2)
            }
        }

        // sets[num] = factors;
        return factors.length;
    }
}



console.log(highlyDivisibleTriangleNumber(500))




// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28

// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?
